// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Users.Infrastructure.Persistence;

#nullable disable

namespace Users.Infrastructure.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    partial class UsersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("users")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Inbox.Models.InboxMessage", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Error")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("CorrelationId");

                    b.ToTable("InboxMessages", "users");
                });

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Inbox.Models.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageCorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("InboxMessageCorrelationId", "Name");

                    b.ToTable("InboxMessageConsumers", "users");
                });

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Outbox.Models.OutboxMessage", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Error")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("CorrelationId");

                    b.ToTable("OutboxMessages", "users");
                });

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Outbox.Models.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageCorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("OutboxMessageCorrelationId", "Name");

                    b.ToTable("OutboxMessageConsumers", "users");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<string>("PermissionCode")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("RoleName")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("PermissionCode", "RoleName");

                    b.HasIndex("RoleName");

                    b.ToTable("RolePermissions", "users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("RolesName")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("RoleName");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "users");
                });

            modelBuilder.Entity("Users.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId")
                        .IsUnique();

                    b.ToTable("Users", "users");
                });

            modelBuilder.Entity("Users.Domain.Users.Models.Permission", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Code");

                    b.ToTable("Permissions", "users");
                });

            modelBuilder.Entity("Users.Domain.Users.Models.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Name");

                    b.ToTable("Roles", "users");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Users.Domain.Users.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users.Domain.Users.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Users.Domain.Users.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Users.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("Learnix.Commons.Domain.ValueObjects.Age", "Age", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("BirthDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("BirthDate");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Learnix.Commons.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("VARCHAR(160)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Address")
                                .IsUnique();

                            b1.ToTable("Users", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Learnix.Commons.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Age")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
