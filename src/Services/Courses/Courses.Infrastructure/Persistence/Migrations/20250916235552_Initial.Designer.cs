// <auto-generated />
using System;
using Courses.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Courses.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(CoursesDbContext))]
    [Migration("20250916235552_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("courses")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Courses.Domain.Courses.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories", "courses");
                });

            modelBuilder.Entity("Courses.Domain.Courses.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DificultLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses", "courses");
                });

            modelBuilder.Entity("Courses.Domain.Courses.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DurationInMinutes")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("OrderIndex")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId", "OrderIndex")
                        .IsUnique();

                    b.ToTable("Lessons", "courses");
                });

            modelBuilder.Entity("Courses.Domain.Courses.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("OrderIndex")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CourseId", "OrderIndex")
                        .IsUnique();

                    b.ToTable("Modules", "courses");
                });

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Inbox.Models.InboxMessage", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Error")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("CorrelationId");

                    b.ToTable("InboxMessages", "courses");
                });

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Inbox.Models.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageCorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("InboxMessageCorrelationId", "Name");

                    b.ToTable("InboxMessageConsumers", "courses");
                });

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Outbox.Models.OutboxMessage", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Error")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("CorrelationId");

                    b.ToTable("OutboxMessages", "courses");
                });

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Outbox.Models.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageCorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("OutboxMessageCorrelationId", "Name");

                    b.ToTable("OutboxMessageConsumers", "courses");
                });

            modelBuilder.Entity("Courses.Domain.Courses.Entities.Course", b =>
                {
                    b.HasOne("Courses.Domain.Courses.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.OwnsOne("Courses.Domain.Courses.ValueObjects.CourseSpecification", "Specification", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Description");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Title");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses", "courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("Specification")
                        .IsRequired();
                });

            modelBuilder.Entity("Courses.Domain.Courses.Entities.Lesson", b =>
                {
                    b.HasOne("Courses.Domain.Courses.Entities.Module", null)
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Courses.Domain.Courses.ValueObjects.Video", "Video", b1 =>
                        {
                            b1.Property<Guid>("LessonId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ThumbnailUrl")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("VideoThumbnailUrl");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("VideoUrl");

                            b1.HasKey("LessonId");

                            b1.ToTable("Lessons", "courses");

                            b1.WithOwner()
                                .HasForeignKey("LessonId");
                        });

                    b.Navigation("Video")
                        .IsRequired();
                });

            modelBuilder.Entity("Courses.Domain.Courses.Entities.Module", b =>
                {
                    b.HasOne("Courses.Domain.Courses.Entities.Course", null)
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Courses.Domain.Courses.Entities.Course", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Courses.Domain.Courses.Entities.Module", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
