// <auto-generated />
using System;
using Learning.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Learning.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(LearningDbContext))]
    partial class LearningDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("learning")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Learning.Domain.Enrollments.Entities.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments", "learning");
                });

            modelBuilder.Entity("Learning.Domain.Progress.Entities.CourseProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnrollmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OverallCompletionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(160)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("TotalMinutesWatched")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId")
                        .IsUnique();

                    b.HasIndex("StudentId", "EnrollmentId", "CourseId")
                        .IsUnique();

                    b.ToTable("CoursesProgress", "learning");
                });

            modelBuilder.Entity("Learning.Domain.Progress.Entities.LessonProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MinutesWatched")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleProgressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(160)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleProgressId", "LessonId")
                        .IsUnique();

                    b.ToTable("LessonsProgress", "learning");
                });

            modelBuilder.Entity("Learning.Domain.Progress.Entities.ModuleProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CourseProgressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(160)");

                    b.HasKey("Id");

                    b.HasIndex("CourseProgressId", "ModuleId")
                        .IsUnique();

                    b.ToTable("ModulesProgress", "learning");
                });

            modelBuilder.Entity("Learning.Domain.Students.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Students", "learning");
                });

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Inbox.Models.InboxMessage", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Error")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("CorrelationId");

                    b.ToTable("InboxMessages", "learning");
                });

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Inbox.Models.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageCorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("InboxMessageCorrelationId", "Name");

                    b.ToTable("InboxMessageConsumers", "learning");
                });

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Outbox.Models.OutboxMessage", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Error")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("CorrelationId");

                    b.ToTable("OutboxMessages", "learning");
                });

            modelBuilder.Entity("Learnix.Commons.Infrastructure.Outbox.Models.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageCorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("OutboxMessageCorrelationId", "Name");

                    b.ToTable("OutboxMessageConsumers", "learning");
                });

            modelBuilder.Entity("Learning.Domain.Enrollments.Entities.Enrollment", b =>
                {
                    b.HasOne("Learning.Domain.Progress.Entities.CourseProgress", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Learning.Domain.Students.Entities.Student", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Learning.Domain.Progress.Entities.CourseProgress", b =>
                {
                    b.HasOne("Learning.Domain.Enrollments.Entities.Enrollment", null)
                        .WithOne()
                        .HasForeignKey("Learning.Domain.Progress.Entities.CourseProgress", "EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Learning.Domain.Progress.Entities.LessonProgress", b =>
                {
                    b.HasOne("Learning.Domain.Progress.Entities.ModuleProgress", null)
                        .WithMany("LessonsProgress")
                        .HasForeignKey("ModuleProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Learning.Domain.Progress.Entities.ModuleProgress", b =>
                {
                    b.HasOne("Learning.Domain.Progress.Entities.CourseProgress", null)
                        .WithMany("ModulesProgress")
                        .HasForeignKey("CourseProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Learning.Domain.Students.Entities.Student", b =>
                {
                    b.OwnsOne("Learning.Domain.Students.ValueObjects.Subscription", "Subscription", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("SubscriptionExpiresAt");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("VARCHAR(160)")
                                .HasColumnName("SubscriptionType");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students", "learning");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("Learnix.Commons.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(160)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Email");

                            b1.HasKey("StudentId");

                            b1.HasIndex("Address")
                                .IsUnique();

                            b1.ToTable("Students", "learning");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("Learnix.Commons.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("LastName");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students", "learning");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Learning.Domain.Progress.Entities.CourseProgress", b =>
                {
                    b.Navigation("ModulesProgress");
                });

            modelBuilder.Entity("Learning.Domain.Progress.Entities.ModuleProgress", b =>
                {
                    b.Navigation("LessonsProgress");
                });

            modelBuilder.Entity("Learning.Domain.Students.Entities.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
